from pinecone import Pinecone
from tqdm.auto import tqdm
import ast
import os
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

#Global variables
PINECONE_API_KEY = os.getenv("PINECONE_API_KEY")
if not PINECONE_API_KEY:
    raise ValueError("PINECONE_API_KEY is not set in environment variables or .env file")

# Initialize Pinecone client
pinecone = Pinecone(api_key=PINECONE_API_KEY)

# delete index
def delete_pinecone_index(index_name):
    print(f"Deleting index '{index_name}' if it exists.")
    try:
        pinecone.delete_index(index_name)
        print(f"Index '{index_name}' successfully deleted.")
    except Exception as e:
        print(f"index '{index_name}' not found no action taken.")


# create index if needed
def get_pinecone_index(index_name):
    print(f"Checking if index {index_name} exists.")
    index_created = False
    
    # List all available indexes
    try:
        indexes = pinecone.list_indexes()
        index_names = [idx["name"] for idx in indexes]
        
        if index_name in index_names:
            print(f"Index {index_name} already exists, good to go.")
            index = pinecone.Index(index_name)
            return index, index_created
    except Exception as e:
        print(f"Error listing indexes: {e}")
    
    # Index does not exist, try to create it
    print(f"Index {index_name} does not exist, need to create it.")
    index_created = True
    
    try:
        # Create a starter index - for free tier in Pinecone cloud
        pinecone.create_index(
            name=index_name,
            dimension=1536,
            metric="cosine",
            spec={
                "serverless": {
                    "cloud": "aws", 
                    "region": "us-east-1"  # starter region for free tier
                }
            }
        )
        print(f"Index {index_name} created.")
    except Exception as e:
        print(f"Error creating index: {e}")
        print("Trying alternative approach...")
        
        try:
            # Try with a pod-based index as fallback
            pinecone.create_index(
                name=index_name,
                dimension=1536,
                metric="cosine"
            )
            print(f"Index {index_name} created with basic settings.")
        except Exception as e2:
            print(f"Failed to create index: {e2}")
            print("Please create an index manually in the Pinecone console and try again.")
            raise
    
    # Get the newly created index
    index = pinecone.Index(index_name)
    return index, index_created

        index = pinecone.Index(index_name)
    return index, index_created


# Function to upsert data
def upsert_data(index, df):
    print("Start: Upserting data to Pinecone index")
    prepped = []

    for i, row in tqdm(df.iterrows(), total=df.shape[0]):
        meta = ast.literal_eval(row['metadata'])
        prepped.append({'id': row['id'], 
                        'values': row['values'],
                        'metadata': meta})
        if len(prepped) >= 200: # batching upserts
            index.upsert(prepped)
            prepped = []

    # Upsert any remaining entries after the loop
    if len(prepped) > 0:
        index.upsert(prepped)
    
    print("Done: Data upserted to Pinecone index")
    return index

